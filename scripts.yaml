script_extractor_turn_off:
  sequence:
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - repeat:
      while:
      - condition: and
        conditions:
        - condition: device
          type: is_on
          device_id: 832c71355eb686dbd19b4ea81c050217
          entity_id: light.extractor_on_off
          domain: light
        - condition: numeric_state
          entity_id: sensor.temp_and_humid1_humidity
          above: '65'
      sequence:
      - delay:
          hours: 0
          minutes: 5
          seconds: 0
          milliseconds: 0
  - type: turn_off
    device_id: 832c71355eb686dbd19b4ea81c050217
    entity_id: light.extractor_on_off
    domain: light
  mode: queued
  alias: Extractor Turn Off
  icon: mdi:fan-off
  max: 10
test:
  alias: test
  icon: mdi:party-popper
  description: Turns on the bedroom lights and then the living room lights after a
    delay
  variables:
    turn_on_entity: light.estudio_miguel_light
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ is_state(turn_on_entity, "on") }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: 120
          kelvin: 2500
on_off_light:
  alias: on_off_light
  mode: parallel
  icon: mdi:lightbulb-auto
  description: '2 levels light: on, off'
  max: 10
  variables:
    turn_on_entity:
    - light.estudio_alba_light
    kelvin: 2500
    level_max: 200
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''off'') | list
          | count == turn_on_entity | list | count }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_max }}'
          kelvin: '{{ kelvin }}'
    default:
    - service: light.turn_off
      target:
        entity_id: '{{ turn_on_entity }}'
      data: {}
3_level_light:
  alias: 3_level_light
  mode: parallel
  icon: mdi:lightbulb-auto
  description: '3 levels light: 70, 30, off'
  max: 10
  variables:
    turn_on_entity:
    - light.estudio_miguel_light
    - light.globito_light_level_on_off
    kelvin: 2500
    level_max: 170
    level_mid: 70
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''off'') | list
          | count == turn_on_entity | list | count }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_max }}'
          kelvin: '{{ kelvin }}'
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''on'') | list |
          count == turn_on_entity | list | count }}'
      - condition: template
        value_template: '{{ turn_on_entity | map(''state_attr'', ''brightness'') |
          select(''=='', level_max) | list | count == turn_on_entity | list | count
          }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_mid }}'
    default:
    - service: light.turn_off
      target:
        entity_id: '{{ turn_on_entity }}'
      data: {}
4_level_light:
  alias: 4_level_light
  mode: parallel
  icon: mdi:lightbulb-auto
  description: '3 levels light: 154, 170, 70, off'
  max: 10
  variables:
    turn_on_entity:
    - light.estudio_miguel_light
    - light.globito_light_level_on_off
    kelvin: 2500
    level_max: 254
    level_mid: 170
    level_low: 70
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''off'') | list
          | count == turn_on_entity | list | count }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_max }}'
          kelvin: '{{ kelvin }}'
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''on'') | list |
          count == turn_on_entity | list | count }}'
      - condition: template
        value_template: '{{ turn_on_entity | map(''state_attr'', ''brightness'') |
          select(''=='', level_max) | list | count == turn_on_entity | list | count
          }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_mid }}'
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''on'') | list |
          count == turn_on_entity | list | count }}'
      - condition: template
        value_template: '{{ turn_on_entity | map(''state_attr'', ''brightness'') |
          select(''=='', level_mid) | list | count == turn_on_entity | list | count
          }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_low }}'
    default:
    - service: light.turn_off
      target:
        entity_id: '{{ turn_on_entity }}'
      data: {}
2_level_light:
  alias: 2_level_light
  mode: parallel
  icon: mdi:lightbulb-auto
  description: Switch between the 2 level values
  max: 10
  variables:
    turn_on_entity:
    - light.estudio_miguel_light
    - light.globito_light_level_on_off
    kelvin: 2500
    level_max: 170
    level_mid: 70
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ turn_on_entity | select(''is_state'', ''on'') | list |
          count == turn_on_entity | list | count }}'
      - condition: template
        value_template: '{{ turn_on_entity | map(''state_attr'', ''brightness'') |
          select(''=='', level_max) | list | count == turn_on_entity | list | count
          }}'
      sequence:
      - service: light.turn_on
        target:
          entity_id: '{{ turn_on_entity }}'
        data:
          brightness: '{{ level_mid }}'
    default:
    - service: light.turn_on
      target:
        entity_id: '{{ turn_on_entity }}'
      data:
        brightness: '{{ level_max }}'
federico_dormitorio:
  alias: federico_dormitorio
  sequence:
  - service: xiaomi_miio.vacuum_clean_segment
    data:
      segments: 17
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_volver:
  alias: federico_volver
  sequence:
  - service: vacuum.return_to_base
    data: {}
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_limpieza:
  alias: federico_limpieza
  sequence:
  - service: xiaomi_miio.vacuum_goto
    data:
      x_coord: '18300'
      y_coord: '24700'
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_start:
  alias: federico_start
  sequence:
  - service: vacuum.start
    data: {}
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_estudio:
  alias: federico_estudio
  sequence:
  - service: xiaomi_miio.vacuum_clean_segment
    data:
      segments: 16
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_pasillo:
  alias: federico_pasillo
  sequence:
  - service: xiaomi_miio.vacuum_clean_segment
    data:
      segments: 18
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_cocina:
  alias: federico_cocina
  sequence:
  - service: xiaomi_miio.vacuum_clean_segment
    data:
      segments: 19
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_salon:
  alias: federico_salon
  sequence:
  - service: xiaomi_miio.vacuum_clean_segment
    data:
      segments: 20
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
federico_location:
  alias: federico_location
  sequence:
  - service: vacuum.locate
    data: {}
    target:
      entity_id: vacuum.federico
  mode: single
  icon: mdi:robot-vacuum
test_google_home:
  alias: test_google_home
  sequence:
  - service: google_assistant_sdk.send_text_command
    data:
      command: Tell me a joke
      media_player: media_player.smartclock
  - service: google_assistant_sdk.send_text_command
    data:
      command: tell me a joke
      media_player: media_player.living_room_speaker
  mode: single
