blueprint:
  name: Aqara Magic Cube
  description: Control anything using Aqara Magic Cube.
  domain: automation
  input:
    remote:
      name: Magic Cube
      description: Select the Aqara Magic Cube device
      selector:
        device:
          integration: zha
          manufacturer: LUMI
    helper_last_face:
      name: (Required) Helper - Last Face
      description: Input Text used to store the last face fired by the controller.
        You will need to manually create a text input entity for this, please read
        the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    flip_1:
      name: Flip cube to side 1
      description: Action to run when cube flips to side 1
      default: []
      selector:
        action: {}
    flip_2:
      name: Flip cube to side 2
      description: Action to run when cube flips to side 2
      default: []
      selector:
        action: {}
    flip_3:
      name: Flip cube to side 3
      description: Action to run when cube flips to side 3
      default: []
      selector:
        action: {}
    flip_4:
      name: Flip cube to side 4
      description: Action to run when cube flips to side 4
      default: []
      selector:
        action: {}
    flip_5:
      name: Flip cube to side 5
      description: Action to run when cube flips to side 5
      default: []
      selector:
        action: {}
    flip_6:
      name: Flip cube to side 6
      description: Action to run when cube flips to side 6
      default: []
      selector:
        action: {}
    slide_1:
      name: Slide - Side 1 up
      description: Action to run when slides with Side 1 up
      default: []
      selector:
        action: {}
    slide_2:
      name: Slide - Side 2 up
      description: Action to run when slides with Side 2 up
      default: []
      selector:
        action: {}
    slide_3:
      name: Slide - Side 3 up
      description: Action to run when slides with Side 3 up
      default: []
      selector:
        action: {}
    slide_4:
      name: Slide - Side 4 up
      description: Action to run when slides with Side 4 up
      default: []
      selector:
        action: {}
    slide_5:
      name: Slide - Side 5 up
      description: Action to run when slides with Side 5 up
      default: []
      selector:
        action: {}
    slide_6:
      name: Slide - Side 6 up
      description: Action to run when slides with Side 6 up
      default: []
      selector:
        action: {}
    knock_1:
      name: Knock - Side 1 up
      description: Action to run when knocks with Side 1 up
      default: []
      selector:
        action: {}
    knock_2:
      name: Knock - Side 2 up
      description: Action to run when knocks with Side 2 up
      default: []
      selector:
        action: {}
    knock_3:
      name: Knock - Side 3 up
      description: Action to run when knocks with Side 3 up
      default: []
      selector:
        action: {}
    knock_4:
      name: Knock - Side 4 up
      description: Action to run when knocks with Side 4 up
      default: []
      selector:
        action: {}
    knock_5:
      name: Knock - Side 5 up
      description: Action to run when knocks with Side 5 up
      default: []
      selector:
        action: {}
    knock_6:
      name: Knock - Side 6 up
      description: Action to run when knocks with Side 6 up
      default: []
      selector:
        action: {}
    rotate_1:
      name: Rotate - Side 1 up
      description: Action to run when rotates with Side 1 up. Use variable relative_degrees (negative if rotating left).
      default: []
      selector:
        action: {}
    rotate_2:
      name: Rotate - Side 2 up
      description: Action to run when rotates with Side 2 up. Use variable relative_degrees (negative if rotating left).
      default: []
      selector:
        action: {}
    rotate_3:
      name: Rotate - Side 3 up
      description: Action to run when rotates with Side 3 up. Use variable relative_degrees (negative if rotating left).
      default: []
      selector:
        action: {}
    rotate_4:
      name: Rotate - Side 4 up
      description: Action to run when rotates with Side 4 up. Use variable relative_degrees (negative if rotating left).
      default: []
      selector:
        action: {}
    rotate_5:
      name: Rotate - Side 5 up
      description: Action to run when rotates with Side 5 up. Use variable relative_degrees (negative if rotating left).
      default: []
      selector:
        action: {}
    rotate_6:
      name: Rotate - Side 6 up
      description: Action to run when rotates with Side 6 up. Use variable relative_degrees (negative if rotating left).
      default: []
      selector:
        action: {}
  source_url: https://github.com/miguellobato84/smarthome/blob/main/blueprints/automation/miguellobato84/zha-aqara-magic-cube.yaml
variables:
  helper_last_face: !input 'helper_last_face'
mode: queued
max: 10
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input 'remote'
action:
- variables:
    command: '{{ trigger.event.data.command }}'
    activated_face: >
      {% if command == 'slide' or command == 'knock' %}
        {% if trigger.event.data.args.activated_face == 1 %} 1
          {% elif trigger.event.data.args.activated_face == 2 %} 5
          {% elif trigger.event.data.args.activated_face == 3 %} 6
          {% elif trigger.event.data.args.activated_face == 4 %} 4
          {% elif trigger.event.data.args.activated_face == 5 %} 2
          {% elif trigger.event.data.args.activated_face == 6 %} 3
        {% endif %}
      {% elif command == 'flip' %}
        {{ trigger.event.data.args.activated_face | int }}
      {% elif command == 'rotate_right' or command == 'rotate_left' %}
        {{ (states(helper_last_face) | from_json).activated_face }}
      {% endif %}
    relative_degrees: >
      {% if command == 'rotate_right' or command == 'rotate_left' %}
        {{ trigger.event.data.args.relative_degrees | float }}
      {% endif %}
- choose:
  - conditions:
    - '{{ command == ''flip'' or command == ''slide'' }}'
    sequence:
      - service: input_text.set_value
        data:
          entity_id: !input 'helper_last_face'
          value: '{{ {"activated_face":activated_face,"last_triggered":now()|string} | to_json }}'
- choose:
  - conditions:
    - '{{ command == ''rotate_right'' or command == ''rotate_left'' }}'
    sequence:
    - choose:
      - conditions: '{{ activated_face == 1 }}'
        sequence: !input 'rotate_1'
      - conditions: '{{ activated_face == 2 }}'
        sequence: !input 'rotate_2'
      - conditions: '{{ activated_face == 3 }}'
        sequence: !input 'rotate_3'
      - conditions: '{{ activated_face == 4 }}'
        sequence: !input 'rotate_4'
      - conditions: '{{ activated_face == 5 }}'
        sequence: !input 'rotate_5'
      - conditions: '{{ activated_face == 6 }}'
        sequence: !input 'rotate_6'
  - conditions:
    - '{{ command == ''flip'' }}'
    sequence:
    - choose:
      - conditions: '{{ activated_face == 1 }}'
        sequence: !input 'flip_1'
      - conditions: '{{ activated_face == 2 }}'
        sequence: !input 'flip_2'
      - conditions: '{{ activated_face == 3 }}'
        sequence: !input 'flip_3'
      - conditions: '{{ activated_face == 4 }}'
        sequence: !input 'flip_4'
      - conditions: '{{ activated_face == 5 }}'
        sequence: !input 'flip_5'
      - conditions: '{{ activated_face == 6 }}'
        sequence: !input 'flip_6'
  - conditions:
    - '{{ command == ''knock'' }}'
    sequence:
    - choose:
      - conditions: '{{ activated_face == 1 }}'
        sequence: !input 'knock_1'
      - conditions: '{{ activated_face == 2 }}'
        sequence: !input 'knock_2'
      - conditions: '{{ activated_face == 3 }}'
        sequence: !input 'knock_3'
      - conditions: '{{ activated_face == 4 }}'
        sequence: !input 'knock_4'
      - conditions: '{{ activated_face == 5 }}'
        sequence: !input 'knock_5'
      - conditions: '{{ activated_face == 6 }}'
        sequence: !input 'knock_6'
  - conditions:
    - '{{ command == ''slide'' }}'
    sequence:
    - choose:
      - conditions: '{{ activated_face == 1 }}'
        sequence: !input 'slide_1'
      - conditions: '{{ activated_face == 2 }}'
        sequence: !input 'slide_2'
      - conditions: '{{ activated_face == 3 }}'
        sequence: !input 'slide_3'
      - conditions: '{{ activated_face == 4 }}'
        sequence: !input 'slide_4'
      - conditions: '{{ activated_face == 5 }}'
        sequence: !input 'slide_5'
      - conditions: '{{ activated_face == 6 }}'
        sequence: !input 'slide_6'
